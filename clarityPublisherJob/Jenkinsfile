/*

On current jenkins server we have env variable JENKINS_GITHUB_CREDENTIALS_ID, is that all that is needed to complete the clone?
On the prod tech jenkins server we need to set up how we will interact. Or see how everyone else does it.

This is a declarative pipeline with .inside():
https://github.com/telegraph/web-jenkins/blob/master/JenkinsFile-ci.groovy

*/

import java.text.SimpleDateFormat


pipeline {
	agent { label 'master' }

	environment{
		GIT_HUB_CREDS = credentials('GIT_HUB_CREDS')
        GITHUB_ORGANIZATION = 'telegraph'
        DATA_PLATFORM_GITHUB_TEAM_ID = '2427630'
        DT_DOCKER_IMAGE = 'eu.gcr.io/tmg-datalake/jenkins:2.3'
        GIT_URL = "git@github.com:telegraph/${env.PROJECT_NAME}.git"

        //Below are temporary ones for testing
        // ghprbSourceBranch = "testbranch"
        // ghprbPullId = "4"
	}

	stages {
		stage("Checkout Code From PullRequest Branch") {
			steps{
				script {
					sh "echo githuborg ${GITHUB_ORGANIZATION}"
					sh "echo PROJECT_NAME ${env.PROJECT_NAME}"
					sh "echo GIT_HUB_CREDS ${GIT_HUB_CREDS}"
					sh "echo ghprbSourceBranch ${env.ghprbSourceBranch}"
	        		checkoutGithub(GITHUB_ORGANIZATION, env.PROJECT_NAME, GIT_HUB_CREDS, env.ghprbSourceBranch)
				}
			}
	    }

	    stage("Create Docker Image") {
			steps{
				script {
					sh "echo hello"
					docker.withRegistry('https://eu.gcr.io', 'gcr:tmg-datalake') {
						docker.image(env.DT_DOCKER_IMAGE).inside('-u root -v /var/run/docker.sock:/var/run/docker.sock') {
							dir(env.PROJECT_NAME) {
								createDockerImage()
							}
						}
					}
				}
			}
	    }

	    stage("Push to Container Registry") {
			steps{
				script {
					docker.withRegistry('https://eu.gcr.io', 'gcr:tmg-datalake') {
						docker.image(env.DT_DOCKER_IMAGE).inside('-u root -v /var/run/docker.sock:/var/run/docker.sock') {
							dir(env.PROJECT_NAME) {
								pushDockerGCP()
		        			}
		        		}
	        		}
				}
			}
	    }

	    stage("Run Code on Docker - Dev") {
			steps{
				script {
					docker.withRegistry('https://eu.gcr.io', 'gcr:tmg-datalake') {
						docker.image(env.DT_DOCKER_IMAGE).inside('-u root -v /var/run/docker.sock:/var/run/docker.sock') {
							dir(env.PROJECT_NAME) {
								runDockerGKE("dev")
								// def devExitCode = runDockerGKE("dev")
								// sh "echo ${devExitCode}"
		        			}

	        			}
	        		}
					// if (devExitCode == 0) {}
					postPRCommentOnGit(env.PROJECT_NAME, env.GITHUB_TOKEN, "dev")
				}
			}
	    }


	    stage("Run Code on GKE - Prod") {
	    	input {
	    		message "Run the code in prod?"
	    		ok "Yes, I am sure that the Pipeline ran in Dev Correctly"
	    	}
			steps{
				script {
					docker.withRegistry('https://eu.gcr.io', 'gcr:tmg-datalake') {
						docker.image(env.DT_DOCKER_IMAGE).inside('-u root -v /var/run/docker.sock:/var/run/docker.sock') {
							dir(env.PROJECT_NAME) {
								runDockerGKE("prod")
							}
		        			// def devExitCode = runDockerGKE("prod")
	        			}
	        		}
					postPRCommentOnGit(env.PROJECT_NAME, env.GITHUB_TOKEN, "prod")
					// if (devExitCode == 0) {}
				}
			}
	    }
	}
}

def checkoutGithub(organisation, project, githubid, branch) {

    echo "Checking out Project from Git"
    echo "organisation ${organisation}"
    echo "project ${project}"
    echo "githubid ${githubid}"
    echo "branch ${branch}"
    checkout changelog: false, poll: false, scm: [
        $class: 'GitSCM',
        branches: [[name: branch]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[
            $class: 'RelativeTargetDirectory',
            relativeTargetDir: "${project}"
        ], [
                $class: 'CleanBeforeCheckout'
        ],[
        	$class: 'WipeWorkspace'
        	]],
        submoduleCfg: [],
        userRemoteConfigs: [[
            credentialsId: GIT_HUB_CREDS,
            url: "git@github.com:${organisation}/${project}.git"
        ]]
    ]
}


def runDockerGKE(enviro) {
	// def statusCode = sh script:"invoke local-deploy-gke --env ${env}", returnStatus:true

	sh "gcloud auth activate-service-account --key-file /google-keys/DataTeam-Jenkins.json"

	if (enviro.equals("dev")) {
		sh "gcloud container clusters get-credentials services-cluster --zone europe-west1-c --project tmg-plat-dev"
	} else {
		sh "gcloud container clusters get-credentials services-cluster --zone europe-west1-c --project tmg-datalake"
	}

	sh "helm del --purge ${env.PROJECT_NAME} || echo helm deployment does not already exist"
	sh "invoke local-deploy-gke --env ${enviro}"
	sleep(15)
	sh "kubectl logs jobs/${env.PROJECT_NAME} --follow=True"
	sh "helm del --purge ${env.PROJECT_NAME} || echo helm deployment does not already exist"
}

def pushDockerGCP() {
	sh "invoke deploy-docker-image"
}

def postPRCommentOnGit(projectName, access_token, enviro) {
	def date = new Date()
	sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
	def prettyDate = sdf.format(date)
	def gitMessage = "Pipeline ran in ${enviro} at: ${prettyDate}. See Jenkins job for logs and please check data output Manually."
	// Message: Pipeline Ran/Failed in Dev/Prod at Time. Link to Jenkins Pipeline:
	sh script: """
	curl -i -H 'Authorization: token ${access_token}' \
	-d \
	'{"body": "${gitMessage}"} \
	' \
	https://api.github.com/repos/telegraph/${projectName}/issues/${env.ghprbPullId}/comments
	"""
}

def createDockerImage() {
	sh "gcloud auth activate-service-account --key-file /google-keys/DataTeam-Jenkins.json"
	sh "invoke make-docker-image"
}
